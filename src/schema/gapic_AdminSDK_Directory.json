{
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "title": "Admin SDK",
  "name": "admin",
  "revision": "20200929",
  "packagePath": "admin",
  "version": "directory_v1",
  "resources": {
    "mobiledevices": {
      "methods": {
        "delete": {
          "id": "directory.mobiledevices.delete",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "description": "Delete Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "response": {
            "$ref": "MobileDevices"
          },
          "parameters": {
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "maxResults": {
              "default": "100",
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "maximum": "100",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.list"
        },
        "action": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "httpMethod": "POST",
          "description": "Take action on Mobile Device"
        },
        "get": {
          "description": "Retrieve Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "id": "directory.roleAssignments.list",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "200",
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "get": {
          "description": "Retrieve a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roleAssignments.get",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "delete": {
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "description": "Creates a role assignment.",
          "id": "directory.roleAssignments.insert",
          "request": {
            "$ref": "RoleAssignment"
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "httpMethod": "GET",
          "parameters": {
            "maxResults": {
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "default": "100",
              "format": "int32"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "location": "query",
              "type": "string"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "Full path of the organizational unit or its ID"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "id": "directory.chromeosdevices.list"
        },
        "action": {
          "parameters": {
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "required": true
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "projection": {
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieve Chrome OS Device",
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "patch": {
          "parameters": {
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "id": "directory.chromeosdevices.patch",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "moveDevicesToOu": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "location": "query",
              "description": "Full path of the target organizational unit or its ID",
              "type": "string",
              "required": true
            }
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "deviceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "projection": {
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          }
        }
      }
    },
    "users": {
      "methods": {
        "update": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "response": {
            "$ref": "User"
          },
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "id": "directory.users.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}"
        },
        "makeAdmin": {
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "httpMethod": "GET",
          "description": "retrieve user",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          }
        },
        "delete": {
          "description": "Delete user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "id": "directory.users.delete",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            }
          }
        },
        "watch": {
          "parameterOrder": [],
          "id": "directory.users.watch",
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "flatPath": "admin/directory/v1/users/watch",
          "description": "Watch for changes in users list",
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "maxResults": {
              "description": "Maximum number of results to return.",
              "default": "100",
              "location": "query",
              "type": "integer",
              "format": "int32",
              "maximum": "500",
              "minimum": "1"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "type": "string",
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "viewType": {
              "location": "query",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "type": "string"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            }
          }
        },
        "signOut": {
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "id": "directory.users.signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ]
        },
        "insert": {
          "id": "directory.users.insert",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users",
          "httpMethod": "POST",
          "description": "create user.",
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "parameters": {},
          "request": {
            "$ref": "User"
          }
        },
        "undelete": {
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undelete a deleted user",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.users.undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        },
        "patch": {
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.patch",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "path": "admin/directory/v1/users",
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "Users"
          },
          "parameters": {
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user."
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order."
            },
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "maximum": "500",
              "location": "query",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list"
        }
      },
      "resources": {
        "photos": {
          "methods": {
            "update": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "id": "directory.users.photos.update",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT"
            },
            "get": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user",
              "id": "directory.users.photos.get",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET"
            },
            "delete": {
              "parameterOrder": [
                "userKey"
              ],
              "description": "Remove photos for the user",
              "id": "directory.users.photos.delete",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "response": {
                "$ref": "UserPhoto"
              }
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the user",
              "id": "directory.users.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            },
            "delete": {
              "id": "directory.users.aliases.delete",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "description": "Remove a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "type": "string",
                  "description": "The alias to be removed",
                  "required": true,
                  "location": "path"
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "description": "List all aliases for a user",
              "id": "directory.users.aliases.list",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Aliases"
              }
            },
            "watch": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "id": "directory.users.aliases.watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                },
                "event": {
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ]
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "httpMethod": "POST",
              "request": {
                "$ref": "Channel"
              },
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list"
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Asp"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "description": "Get information about an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "codeId": {
              "location": "path",
              "type": "integer",
              "description": "The unique ID of the ASP.",
              "required": true,
              "format": "int32"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user.",
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "response": {
            "$ref": "Asps"
          }
        },
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32",
              "location": "path",
              "required": true,
              "type": "integer"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "description": "Delete an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "description": "List all aliases for a group",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "id": "directory.groups.aliases.list",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "insert": {
              "id": "directory.groups.aliases.insert",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "description": "Add a alias for the group",
              "httpMethod": "POST",
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "id": "directory.groups.aliases.delete"
            }
          }
        }
      },
      "methods": {
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.get",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group"
        },
        "list": {
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Groups"
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "orderBy": {
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "default": "200"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            }
          },
          "httpMethod": "GET",
          "id": "directory.groups.list",
          "parameterOrder": []
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Update Group",
          "httpMethod": "PUT"
        },
        "insert": {
          "parameterOrder": [],
          "id": "directory.groups.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {},
          "response": {
            "$ref": "Group"
          },
          "description": "Create Group",
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          }
        },
        "delete": {
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Delete Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          }
        },
        "patch": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "parameters": {},
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "request": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    },
    "members": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.members.insert",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group."
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.members.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "DELETE",
          "description": "Remove membership.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "httpMethod": "PUT",
          "id": "directory.members.update",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "description": "Update membership of a user in the specified group."
        },
        "hasMember": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.hasMember",
          "response": {
            "$ref": "MembersHasMember"
          },
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        },
        "list": {
          "response": {
            "$ref": "Members"
          },
          "httpMethod": "GET",
          "id": "directory.members.list",
          "parameters": {
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path"
            },
            "includeDerivedMembership": {
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "default": "200",
              "type": "integer"
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members"
        },
        "patch": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "id": "directory.members.patch",
          "description": "Patch Member via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Member"
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "description": "Retrieve Group Member",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.insert",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "description": "Add organizational unit",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.patch",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "pattern": "^.*$",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieve all organizational units",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "default": ""
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "type": {
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Retrieve organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "GET"
        },
        "update": {
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path",
              "pattern": "^.*$"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Update organizational unit"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "parameters": {
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.list",
          "response": {
            "$ref": "DomainAliases"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domain aliases of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer.",
          "parameters": {
            "domainAliasName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "description": "Deletes a domain Alias of the customer.",
          "id": "directory.domainAliases.delete"
        },
        "insert": {
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Token"
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET",
          "id": "directory.tokens.get"
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "id": "directory.tokens.list",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Tokens"
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET"
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.delete",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            },
            "clientId": {
              "required": true,
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "type": "integer",
                  "minimum": "1",
                  "maximum": "500",
                  "format": "int32",
                  "location": "query",
                  "description": "Maximum number of results to return."
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              }
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Building"
              },
              "description": "Retrieves a building.",
              "httpMethod": "GET",
              "id": "directory.resources.buildings.get",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "description": "The unique ID of the building to retrieve.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "delete": {
              "id": "directory.resources.buildings.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The id of the building to delete."
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "update": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to update.",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "insert": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "coordinatesSource": {
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                }
              },
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a building."
            }
          }
        },
        "features": {
          "methods": {
            "update": {
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.resources.features.update",
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Updates a feature.",
              "httpMethod": "PUT"
            },
            "get": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Retrieves a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.get",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to retrieve."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.features.patch"
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "location": "query",
                  "minimum": "1",
                  "maximum": "500",
                  "type": "integer"
                }
              },
              "id": "directory.resources.features.list",
              "description": "Retrieves a list of features for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET"
            },
            "rename": {
              "request": {
                "$ref": "FeatureRename"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "description": "Renames a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.resources.features.rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ]
            },
            "delete": {
              "id": "directory.resources.features.delete",
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Deletes a feature.",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "insert": {
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "POST",
              "id": "directory.resources.features.insert",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature."
            }
          }
        },
        "calendars": {
          "methods": {
            "insert": {
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.insert",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "patch": {
              "httpMethod": "PATCH",
              "id": "directory.resources.calendars.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "minimum": "1"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string",
                  "location": "query"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "update": {
              "id": "directory.resources.calendars.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "delete": {
              "id": "directory.resources.calendars.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            }
          }
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "id": "directory.customers.update",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Updates a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "patch": {
          "id": "directory.customers.patch",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration"
        },
        "get": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Retrieves a customer.",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "update": {
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PUT",
          "id": "directory.roles.update",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Updates a role."
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "id": "directory.roles.delete",
          "httpMethod": "DELETE"
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Patch role via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.patch",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "description": "Creates a role.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path"
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "description": "Retrieves a role.",
          "id": "directory.roles.get",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "100",
              "location": "query",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Roles"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain."
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string"
            }
          }
        },
        "list": {
          "id": "directory.verificationCodes.list",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "VerificationCodes"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "generate": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          },
          "httpMethod": "POST",
          "id": "directory.verificationCodes.generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "description": "Create schema.",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.schemas.insert",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId"
          ]
        },
        "delete": {
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true
            }
          },
          "description": "Delete schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Update schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.update",
          "parameters": {
            "schemaKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PUT"
        },
        "get": {
          "description": "Retrieve schema",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.get",
          "parameters": {
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "id": "directory.schemas.list",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain of the customer.",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.get",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "domainName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          }
        },
        "list": {
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domains of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "parameters": {
            "domainName": {
              "description": "Name of domain to be deleted",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "description": "Inserts a domain of the customer.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Privileges"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "id": "directory.privileges.list",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    }
  },
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "schemas": {
    "ChromeOsDevice": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice",
          "type": "string"
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            }
          }
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "lastKnownNetwork": {
          "items": {
            "type": "object",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "description": "Information for an ip address."
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "int64"
                }
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            },
            "type": "object"
          }
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            }
          }
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "File name",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "cpuTemperatureInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    }
                  }
                },
                "description": "List of CPU temperature samples."
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "systemRamTotal": {
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              },
              "activeTime": {
                "description": "Duration in milliseconds",
                "type": "integer",
                "format": "int32"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of active time ranges (Read-only)"
        }
      },
      "type": "object",
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Features": {
      "properties": {
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Features",
      "description": "Public API: Resources.features"
    },
    "BuildingAddress": {
      "type": "object",
      "id": "BuildingAddress",
      "properties": {
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "capacity": {
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        }
      },
      "id": "CalendarResource"
    },
    "Customer": {
      "id": "Customer",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "customerCreationTime": {
          "type": "string",
          "description": "The customer's creation time (Readonly)",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        }
      }
    },
    "SchemaFieldSpec": {
      "properties": {
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Name of the field."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true",
          "type": "boolean"
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            },
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "readAccessType": {
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS",
          "type": "string"
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "SchemaFieldSpec",
      "type": "object"
    },
    "UserName": {
      "properties": {
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserName"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "The ID of the role that is assigned."
        },
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        }
      }
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      },
      "id": "UserRelation"
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "properties": {
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object",
      "id": "UserWebsite"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "type": "object",
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      }
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "email": {
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "firstSync": {
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionCode": {
                "format": "int32",
                "description": "Version code of application",
                "type": "integer"
              },
              "permission": {
                "type": "array",
                "description": "List of Permissions for application",
                "items": {
                  "type": "string"
                }
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              }
            }
          },
          "description": "List of applications installed on Mobile Device"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        }
      }
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars",
      "properties": {
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array",
          "description": "The CalendarResources in this page of results."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        }
      },
      "type": "object"
    },
    "UserPosixAccount": {
      "type": "object",
      "id": "UserPosixAccount",
      "properties": {
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "description": "The default group ID.",
          "format": "uint64",
          "type": "string"
        }
      },
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#members",
          "type": "string"
        }
      }
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        }
      }
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects."
        }
      }
    },
    "UserKeyword": {
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserKeyword",
      "type": "object",
      "description": "JSON template for a keyword entry."
    },
    "User": {
      "type": "object",
      "properties": {
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "kind": {
          "readOnly": true,
          "type": "string",
          "default": "admin#directory#user",
          "description": "Output only. Kind of resource this is."
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "type": "array"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastLoginTime": {
          "format": "date-time",
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "type": "string"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "password": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true
        },
        "creationTime": {
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)",
          "format": "date-time",
          "readOnly": true
        },
        "customSchemas": {
          "type": "object",
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "deletionTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "name": {
          "$ref": "UserName",
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "agreedToTerms": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        }
      },
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "OrgUnit": {
      "type": "object",
      "id": "OrgUnit",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        }
      },
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevices": {
      "type": "object",
      "id": "MobileDevices",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array",
          "description": "List of Mobile Device objects."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        }
      }
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Token",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string",
          "default": "admin#directory#token"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        }
      },
      "type": "object"
    },
    "UserPhone": {
      "description": "JSON template for a phone entry.",
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserPhone"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "UserPhoto": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Width in pixels of the photo"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "photoData": {
          "description": "Base64 encoded photo data",
          "format": "byte",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height in pixels of the photo"
        }
      },
      "id": "UserPhoto",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Domains": {
      "id": "Domains",
      "properties": {
        "creationTime": {
          "type": "string",
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domain"
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean"
        }
      },
      "id": "MembersHasMember",
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object"
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "id": "FeatureInstance",
      "type": "object"
    },
    "UserSshPublicKey": {
      "properties": {
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey"
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        }
      },
      "description": "JSON template for a language entry.",
      "type": "object"
    },
    "Role": {
      "type": "object",
      "id": "Role",
      "properties": {
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        },
        "roleId": {
          "type": "string",
          "description": "ID of the role.",
          "format": "int64"
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "properties": {
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "The set of privileges that are granted to this role."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        }
      }
    },
    "UserEmail": {
      "id": "UserEmail",
      "type": "object",
      "description": "JSON template for an email.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        }
      }
    },
    "DomainAlias": {
      "properties": {
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DomainAlias"
    },
    "Building": {
      "properties": {
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Building",
      "description": "Public API: Resources.buildings"
    },
    "CustomerPostalAddress": {
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        }
      },
      "id": "CustomerPostalAddress",
      "type": "object"
    },
    "OrgUnits": {
      "type": "object",
      "id": "OrgUnits",
      "properties": {
        "organizationUnits": {
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnits"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Group": {
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "Kind of resource this is."
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "Group direct members count"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "Asps": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asps",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Schema": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema",
          "type": "string"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "fields": {
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "description": "Fields of Schema",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Display name for the schema."
        },
        "schemaName": {
          "description": "Schema name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        }
      },
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Schema"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      }
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "type": "object",
      "id": "MobileDeviceAction"
    },
    "UserUndelete": {
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete"
    },
    "Domains2": {
      "type": "object",
      "id": "Domains2",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domains",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "domains": {
          "type": "array",
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          }
        }
      }
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean"
        }
      }
    },
    "UserGender": {
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources.",
          "type": "array"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      }
    },
    "RoleAssignments": {
      "type": "object",
      "id": "RoleAssignments",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        }
      }
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in decimal degrees."
        },
        "latitude": {
          "format": "double",
          "description": "Latitude in decimal degrees.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        }
      },
      "type": "object",
      "id": "Tokens"
    },
    "Feature": {
      "id": "Feature",
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        }
      }
    },
    "UserAbout": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "id": "UserAbout",
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "type": "object",
      "id": "UserAddress",
      "properties": {
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "description": "JSON template for an organization entry.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer",
          "format": "int32"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Schemas": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        },
        "kind": {
          "default": "admin#directory#schemas",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Schemas",
      "type": "object",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "id": "Aliases",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode"
        }
      },
      "id": "VerificationCode",
      "type": "object"
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        }
      },
      "type": "object"
    },
    "Channel": {
      "id": "Channel",
      "type": "object",
      "description": "An notification channel used to watch for resource changes.",
      "properties": {
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string",
          "default": "api#channel"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "params": {
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        }
      }
    },
    "ChromeOsDevices": {
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevices"
    },
    "Alias": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Alias object in Directory API.",
      "id": "Alias"
    },
    "Buildings": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        }
      },
      "id": "Buildings"
    },
    "UserLocation": {
      "id": "UserLocation",
      "properties": {
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        }
      },
      "description": "JSON template for a location entry.",
      "type": "object"
    },
    "Users": {
      "id": "Users",
      "type": "object",
      "properties": {
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#users",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "users": {
          "items": {
            "$ref": "User"
          },
          "type": "array",
          "description": "List of user objects."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Asp": {
      "type": "object",
      "id": "Asp",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "type": "integer",
          "format": "int32"
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format."
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Roles": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "description": "A list of Role resources.",
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string",
          "default": "admin#directory#roles"
        }
      },
      "id": "Roles"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      },
      "id": "ChromeOsDeviceAction",
      "type": "object"
    },
    "Groups": {
      "id": "Groups",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "groups": {
          "type": "array",
          "description": "List of group objects.",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "type": "object",
      "properties": {
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        }
      },
      "id": "UserIm"
    },
    "Member": {
      "properties": {
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#member"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "UserExternalId": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      },
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "type": "object"
    }
  },
  "discoveryVersion": "v1",
  "id": "admin:directory_v1",
  "basePath": "",
  "rootUrl": "https://www.googleapis.com/",
  "baseUrl": "https://www.googleapis.com/",
  "servicePath": "",
  "ownerName": "Google",
  "canonicalName": "directory",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "protocol": "rest",
  "kind": "discovery#restDescription"
}
