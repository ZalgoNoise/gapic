{
  "packagePath": "admin",
  "ownerName": "Google",
  "baseUrl": "https://www.googleapis.com/",
  "version": "directory_v1",
  "name": "admin",
  "canonicalName": "directory",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    }
  },
  "discoveryVersion": "v1",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "title": "Admin SDK",
  "fullyEncodeReservedExpansion": true,
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "ownerDomain": "google.com",
  "servicePath": "",
  "protocol": "rest",
  "id": "admin:directory_v1",
  "resources": {
    "schemas": {
      "methods": {
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "description": "Create schema.",
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "POST",
          "id": "directory.schemas.insert"
        },
        "delete": {
          "description": "Delete schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.schemas.delete"
        },
        "get": {
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          }
        },
        "list": {
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "id": "directory.schemas.list",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schemas"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.patch",
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "id": "directory.schemas.update",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "schemaKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          }
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "list": {
              "response": {
                "$ref": "Buildings"
              },
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of buildings for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "format": "int32",
                  "maximum": "500",
                  "location": "query",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                }
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list"
            },
            "insert": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query"
                }
              },
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a building.",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Deletes a building.",
              "parameters": {
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to delete."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete"
            },
            "update": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "description": "Updates a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.update"
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Retrieves a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Building"
              }
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.patch"
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "id": "directory.resources.calendars.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "delete": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "update": {
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.list",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "maxResults": {
                  "format": "int32",
                  "maximum": "500",
                  "type": "integer",
                  "minimum": "1",
                  "location": "query",
                  "description": "Maximum number of results to return."
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                }
              },
              "description": "Retrieves a list of calendar resources for an account."
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "description": "Retrieves a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "POST",
              "description": "Inserts a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            }
          }
        },
        "features": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.list",
              "parameters": {
                "maxResults": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of features for an account.",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              }
            },
            "get": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.get",
              "description": "Retrieves a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "insert": {
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "id": "directory.resources.features.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature.",
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.update",
              "response": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "patch": {
              "id": "directory.resources.features.patch",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              }
            },
            "rename": {
              "description": "Renames a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "id": "directory.resources.features.rename",
              "parameters": {
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename"
            },
            "delete": {
              "httpMethod": "DELETE",
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.delete",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Retrieve Mobile Device",
          "response": {
            "$ref": "MobileDevice"
          },
          "parameters": {
            "resourceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            }
          },
          "id": "directory.mobiledevices.get"
        },
        "delete": {
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Delete Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "list": {
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.mobiledevices.list",
          "parameters": {
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "type": "integer",
              "maximum": "100",
              "minimum": "1",
              "default": "100"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "action": {
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "id": "directory.mobiledevices.action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Take action on Mobile Device"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "projection": {
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameters": {
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return.",
              "type": "integer"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "id": "directory.chromeosdevices.list",
          "parameterOrder": [
            "customerId"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "id": "directory.chromeosdevices.patch",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "moveDevicesToOu": {
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the target organizational unit or its ID",
              "required": true,
              "location": "query"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "action": {
          "description": "Take action on Chrome OS Device",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "update": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PUT",
          "description": "Update Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.update",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "id": "directory.twoStepVerification.turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.privileges.list",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "update": {
          "id": "directory.orgunits.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Update organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "insert": {
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Add organizational unit",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "PATCH",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.patch"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "default": "",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "type": "string"
            },
            "type": {
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return all sub-organizations or just immediate children"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "required": true
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "DELETE"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Retrieve organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.get",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Creates a role assignment.",
          "request": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST"
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "get": {
          "id": "directory.roleAssignments.get",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieve a role assignment.",
          "httpMethod": "GET",
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "required": true
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "list": {
          "parameters": {
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "maximum": "200",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify the next page in the list.",
              "location": "query"
            },
            "roleId": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "GET",
          "id": "directory.roleAssignments.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments."
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "response": {
            "$ref": "Asps"
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "List the ASPs issued by a user.",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "id": "directory.asps.list",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "delete": {
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "parameters": {
            "codeId": {
              "format": "int32",
              "type": "integer",
              "required": true,
              "location": "path",
              "description": "The unique ID of the ASP to be deleted."
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "location": "path",
              "type": "integer",
              "description": "The unique ID of the ASP.",
              "format": "int32",
              "required": true
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          }
        }
      }
    },
    "groups": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Delete Group",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "insert": {
          "request": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups",
          "parameters": {},
          "parameterOrder": [],
          "id": "directory.groups.insert",
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "POST"
        },
        "patch": {
          "description": "Patch Groups via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch",
          "request": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string"
            }
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "response": {
            "$ref": "Groups"
          },
          "id": "directory.groups.list",
          "flatPath": "admin/directory/v1/groups"
        },
        "get": {
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group",
          "id": "directory.groups.get",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Group"
          }
        },
        "update": {
          "description": "Update Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Remove a alias for the group",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "alias": {
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed",
                  "location": "path"
                }
              }
            },
            "list": {
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "List all aliases for a group",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "id": "directory.groups.aliases.list",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET"
            },
            "insert": {
              "description": "Add a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "request": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "description": "Inserts a domain alias of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "request": {
            "$ref": "DomainAlias"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path"
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "DELETE",
          "id": "directory.domainAliases.delete"
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "description": "Lists the domain aliases of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.list",
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "get": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.get",
          "description": "Retrieves a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "response": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.patch",
          "httpMethod": "PATCH"
        },
        "get": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "parameters": {
            "customerKey": {
              "required": true,
              "type": "string",
              "description": "Id of the customer to be retrieved",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a customer.",
          "parameterOrder": [
            "customerKey"
          ]
        },
        "update": {
          "description": "Updates a customer.",
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "request": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains"
        },
        "list": {
          "response": {
            "$ref": "Domains2"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "description": "Lists the domains of the customer.",
          "id": "directory.domains.list"
        },
        "delete": {
          "parameters": {
            "domainName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "description": "Deletes a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "get": {
          "httpMethod": "GET",
          "id": "directory.domains.get",
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "domainName": {
              "description": "Name of domain to be retrieved",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "id": "directory.members.list",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve all members in a group (paginated)",
          "response": {
            "$ref": "Members"
          },
          "parameters": {
            "maxResults": {
              "location": "query",
              "default": "200",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "format": "int32"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            }
          },
          "httpMethod": "GET"
        },
        "get": {
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the member",
              "type": "string"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "httpMethod": "GET",
          "description": "Retrieve Group Member",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Update membership of a user in the specified group.",
          "id": "directory.members.update",
          "httpMethod": "PUT"
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "DELETE",
          "description": "Remove membership.",
          "id": "directory.members.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "insert": {
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "POST",
          "id": "directory.members.insert",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Add user to the specified group."
        },
        "hasMember": {
          "response": {
            "$ref": "MembersHasMember"
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            },
            "memberKey": {
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "patch": {
          "id": "directory.members.patch",
          "response": {
            "$ref": "Member"
          },
          "description": "Patch Member via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH"
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "clientId": {
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "location": "path"
            },
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "id": "directory.tokens.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "id": "directory.tokens.get",
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          },
          "id": "admin.channels.stop",
          "httpMethod": "POST",
          "parameterOrder": [],
          "description": "Stop watching resources through this channel.",
          "parameters": {},
          "path": "admin/directory_v1/channels/stop"
        }
      }
    },
    "roles": {
      "methods": {
        "update": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Updates a role.",
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            }
          }
        },
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "description": "Creates a role.",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/roles"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.get",
          "httpMethod": "GET",
          "description": "Retrieves a role.",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "patch": {
          "id": "directory.roles.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Patch role via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Deletes a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "100",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "type": "integer"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          },
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roles.list"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "parameterOrder": [
            "userKey"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.invalidate"
        },
        "generate": {
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate"
        },
        "list": {
          "response": {
            "$ref": "VerificationCodes"
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "users": {
      "methods": {
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "parameterOrder": [],
          "description": "Watch for changes in users list",
          "flatPath": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "parameters": {
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "location": "query",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "default": "admin_view",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "maximum": "500",
              "description": "Maximum number of results to return.",
              "default": "100"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            }
          }
        },
        "signOut": {
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST"
        },
        "makeAdmin": {
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "response": {
            "$ref": "Users"
          },
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "viewType": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "500",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "default": "100"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string"
            }
          }
        },
        "patch": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "description": "Patch Users via Apiary Patch Orchestration"
        },
        "undelete": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.undelete",
          "httpMethod": "POST",
          "request": {
            "$ref": "UserUndelete"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undelete a deleted user",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "The immutable id of the user",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete"
        },
        "get": {
          "httpMethod": "GET",
          "description": "retrieve user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "viewType": {
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            }
          }
        },
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "description": "Delete user",
          "id": "directory.users.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "update": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.update",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "request": {
            "$ref": "User"
          },
          "parameters": {},
          "path": "admin/directory/v1/users",
          "description": "create user.",
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "POST",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          }
        }
      },
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user",
              "id": "directory.users.photos.get",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Remove photos for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "patch": {
              "parameterOrder": [
                "userKey"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "httpMethod": "PUT",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "request": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update"
            }
          }
        },
        "aliases": {
          "methods": {
            "list": {
              "description": "List all aliases for a user",
              "response": {
                "$ref": "Aliases"
              },
              "httpMethod": "GET",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.aliases.list"
            },
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                },
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              }
            },
            "watch": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                },
                "event": {
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "type": "string",
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)"
                }
              },
              "id": "directory.users.aliases.watch",
              "description": "Watch for changes in users list",
              "request": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "insert": {
              "request": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "description": "Add a alias for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            }
          }
        }
      }
    }
  },
  "revision": "20200929",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        }
      }
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "kind": "discovery#restDescription",
  "batchPath": "batch/admin/directory_v1",
  "basePath": "",
  "schemas": {
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "description": "Name of OrgUnit",
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        }
      },
      "id": "OrgUnit",
      "type": "object"
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Customer",
      "properties": {
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "kind": {
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "default": "admin#directory#customer",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "type": "object",
      "description": "JSON template for a keyword entry.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "FeatureRename"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "type": "object",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "UserName": {
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "description": "Last Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "givenName": {
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserName"
    },
    "VerificationCode": {
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "VerificationCode",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "id": "UserAddress",
      "type": "object",
      "properties": {
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        }
      }
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "type": "object",
      "properties": {
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "gid": {
          "description": "The default group ID.",
          "type": "string",
          "format": "uint64"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        }
      },
      "id": "Member"
    },
    "Alias": {
      "id": "Alias",
      "properties": {
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "id": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object",
      "id": "MembersHasMember"
    },
    "UserEmail": {
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        }
      },
      "type": "object"
    },
    "UserPhone": {
      "type": "object",
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "properties": {
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        }
      }
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserIm"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserUndelete"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "type": "object"
    },
    "UserRelation": {
      "id": "UserRelation",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "type": "object"
    },
    "BuildingAddress": {
      "properties": {
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        }
      },
      "id": "BuildingAddress",
      "type": "object",
      "description": "Public API: Resources.buildings"
    },
    "CalendarResource": {
      "properties": {
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "BuildingCoordinates": {
      "type": "object",
      "id": "BuildingCoordinates",
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in decimal degrees."
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "DomainAliases": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects."
        }
      },
      "id": "DomainAliases"
    },
    "ChromeOsDevices": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices",
          "type": "string"
        },
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array",
          "description": "List of Chrome OS Device objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevices"
    },
    "Group": {
      "id": "Group",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "Group direct members count"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "List of aliases (Read-only)",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group",
          "type": "string"
        },
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Group name"
        }
      }
    },
    "ChromeOsDevice": {
      "properties": {
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "cpuStatusReports": {
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    }
                  }
                },
                "description": "List of CPU temperature samples.",
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "type": "integer",
                "format": "int32",
                "description": "Duration in milliseconds"
              }
            },
            "type": "object"
          },
          "description": "List of active time ranges (Read-only)",
          "type": "array"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            }
          }
        },
        "autoUpdateExpiration": {
          "type": "string",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "properties": {
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    },
                    "storageTotal": {
                      "type": "string",
                      "format": "int64",
                      "description": "Total disk space [in bytes]"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "type": "object",
          "properties": {
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "systemRamTotal": {
          "format": "int64",
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "deviceFiles": {
          "items": {
            "properties": {
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "List of device files to download (Read-only)",
          "type": "array"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "lastKnownNetwork": {
          "type": "array",
          "description": "Contains last known network (Read-only)",
          "items": {
            "description": "Information for an ip address.",
            "type": "object",
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              }
            }
          }
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        }
      },
      "id": "ChromeOsDevice",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevices": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          }
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "MobileDevices",
      "type": "object"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "UserMakeAdmin"
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\"."
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "expiration": {
          "type": "string",
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        }
      },
      "id": "Channel"
    },
    "CalendarResources": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "CalendarResources"
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the Mobile Device"
        }
      },
      "id": "MobileDeviceAction"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "properties": {
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "numericIndexingSpec": {
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          }
        },
        "readAccessType": {
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field."
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is."
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaName": {
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Display name for the schema."
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Fields of Schema"
        }
      },
      "type": "object"
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "type": "object",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      },
      "id": "ChromeOsDeviceAction"
    },
    "UserGender": {
      "type": "object",
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "id": "UserGender"
    },
    "UserOrganization": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "type": "integer",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        }
      },
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization",
      "type": "object"
    },
    "Schemas": {
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "type": "array",
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects."
        },
        "kind": {
          "default": "admin#directory#schemas",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Website."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserWebsite"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "id": "UserLocation",
      "properties": {
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object"
    },
    "Privileges": {
      "type": "object",
      "id": "Privileges",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always admin#directory#privileges."
        },
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        }
      }
    },
    "RoleAssignments": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string",
          "default": "admin#directory#roleAssignments"
        },
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        }
      },
      "id": "RoleAssignments"
    },
    "Building": {
      "id": "Building",
      "description": "Public API: Resources.buildings",
      "properties": {
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "floorNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Aliases": {
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        }
      },
      "type": "object"
    },
    "User": {
      "type": "object",
      "properties": {
        "creationTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object"
        },
        "kind": {
          "default": "admin#directory#user",
          "readOnly": true,
          "description": "Output only. Kind of resource this is.",
          "type": "string"
        },
        "lastLoginTime": {
          "type": "string",
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "readOnly": true
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "customerId": {
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string"
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "aliases": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "isAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "name": {
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "password": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        }
      },
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Tokens": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        }
      },
      "type": "object",
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature",
          "type": "string"
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        }
      },
      "id": "Feature"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "UserExternalId": {
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      }
    },
    "Groups": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "roleId": {
          "description": "ID of the role.",
          "type": "string",
          "format": "int64"
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            }
          }
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string",
          "default": "admin#directory#role"
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "items": {
            "$ref": "Member"
          },
          "type": "array",
          "description": "List of member objects."
        }
      }
    },
    "MobileDevice": {
      "properties": {
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)",
          "type": "array"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "firstSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "name": {
          "type": "array",
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "lastSync": {
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "applications": {
          "type": "array",
          "description": "List of applications installed on Mobile Device",
          "items": {
            "type": "object",
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "versionCode": {
                "format": "int32",
                "type": "integer",
                "description": "Version code of application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "id": "MobileDevice",
      "type": "object"
    },
    "Buildings": {
      "properties": {
        "buildings": {
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "Buildings"
    },
    "Features": {
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "description": "Public API: Resources.features",
      "id": "Features",
      "type": "object"
    },
    "Asps": {
      "id": "Asps",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DomainAlias": {
      "type": "object",
      "id": "DomainAlias",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        }
      }
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "id": "UserAbout",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        },
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Domains": {
      "id": "Domains",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)"
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string",
          "description": "The domain name of the customer."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        }
      },
      "type": "object"
    },
    "Domains2": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#users"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects."
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        }
      }
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string",
          "default": "admin#directory#roles"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "type": "array",
          "description": "A list of Role resources."
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      }
    },
    "Token": {
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "kind": {
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Token"
    },
    "CustomerPostalAddress": {
      "properties": {
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress"
    },
    "Privilege": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        }
      },
      "type": "object",
      "id": "Privilege"
    },
    "RoleAssignment": {
      "type": "object",
      "id": "RoleAssignment",
      "properties": {
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "roleAssignmentId": {
          "format": "int64",
          "type": "string",
          "description": "ID of this roleAssignment."
        }
      }
    },
    "OrgUnits": {
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is."
        },
        "organizationUnits": {
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "properties": {
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "lastTimeUsed": {
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "description": "The unique ID of the ASP.",
          "format": "int32"
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserPhoto": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "photoData": {
          "format": "byte",
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        }
      },
      "id": "UserPhoto"
    }
  },
  "rootUrl": "https://www.googleapis.com/",
  "documentationLink": "http://developers.google.com/admin-sdk/"
}
