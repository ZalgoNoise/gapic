{
  "revision": "20200929",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "baseUrl": "https://www.googleapis.com/",
  "servicePath": "",
  "protocol": "rest",
  "schemas": {
    "UserRelation": {
      "id": "UserRelation",
      "properties": {
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "type": "object"
    },
    "RoleAssignments": {
      "properties": {
        "items": {
          "description": "A list of RoleAssignment resources.",
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          }
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "RoleAssignments"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "applications": {
          "type": "array",
          "description": "List of applications installed on Mobile Device",
          "items": {
            "type": "object",
            "properties": {
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "versionCode": {
                "description": "Version code of application",
                "type": "integer",
                "format": "int32"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              }
            }
          }
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "email": {
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "RoleAssignment": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device",
          "type": "string"
        }
      },
      "id": "MobileDeviceAction",
      "type": "object"
    },
    "Groups": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "groups": {
          "type": "array",
          "description": "List of group objects.",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        }
      },
      "id": "Groups"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAlias",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CustomerPostalAddress": {
      "properties": {
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Customer": {
      "properties": {
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "customerCreationTime": {
          "type": "string",
          "description": "The customer's creation time (Readonly)",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        }
      },
      "id": "Customer",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserLanguage": {
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserLanguage",
      "description": "JSON template for a language entry."
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "description": "Last Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        }
      }
    },
    "UserOrganization": {
      "properties": {
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        }
      },
      "type": "object",
      "id": "UserOrganization",
      "description": "JSON template for an organization entry."
    },
    "Schema": {
      "id": "Schema",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema",
          "type": "string"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Schema name"
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        }
      },
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of Privilege resources."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "CalendarResource": {
      "properties": {
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The unique ID for the calendar resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        }
      },
      "id": "CalendarResource",
      "type": "object",
      "description": "Public API: Resources.calendars"
    },
    "Token": {
      "type": "object",
      "id": "Token",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        }
      }
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "properties": {
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "uid": {
          "type": "string",
          "description": "The POSIX compliant user ID.",
          "format": "uint64"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "User": {
      "id": "User",
      "properties": {
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "aliases": {
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "lastLoginTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "User's last login time. (Read-only)"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "isAdmin": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is admin (Read-only)"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password",
          "type": "string"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object",
          "description": "Custom fields of the user."
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "etag": {
          "type": "string",
          "description": "Output only. ETag of the resource.",
          "readOnly": true
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "type": "array"
        },
        "name": {
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "username of User"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#user",
          "readOnly": true,
          "description": "Output only. Kind of resource this is."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserAbout": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "id": "UserAbout",
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object",
      "description": "JSON template for a keyword entry."
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        }
      }
    },
    "SchemaFieldSpec": {
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number",
              "format": "double"
            },
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object"
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "type": "string"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "indexed": {
          "type": "boolean",
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true"
        }
      },
      "type": "object",
      "id": "SchemaFieldSpec"
    },
    "Group": {
      "properties": {
        "nonEditableAliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "Group direct members count"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of aliases (Read-only)"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Group",
      "type": "object"
    },
    "Members": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#members"
        }
      },
      "id": "Members",
      "type": "object"
    },
    "Schemas": {
      "id": "Schemas",
      "properties": {
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schemas"
        }
      },
      "type": "object",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsDevice": {
      "properties": {
        "recentUsers": {
          "items": {
            "properties": {
              "type": {
                "description": "The type of the user",
                "type": "string"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              }
            }
          }
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time"
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              },
              "activeTime": {
                "type": "integer",
                "format": "int32",
                "description": "Duration in milliseconds"
              }
            },
            "type": "object"
          },
          "description": "List of active time ranges (Read-only)",
          "type": "array"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "properties": {
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              },
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "int64"
                }
              }
            }
          },
          "type": "array"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "lastKnownNetwork": {
          "type": "array",
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          }
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "cpuTemperatureInfo": {
                "items": {
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "type": "object"
                },
                "description": "List of CPU temperature samples.",
                "type": "array"
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              }
            }
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "type": "string",
                      "description": "Free disk space [in bytes]",
                      "format": "int64"
                    }
                  }
                },
                "type": "array",
                "description": "Disk volumes"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevice"
    },
    "Roles": {
      "type": "object",
      "id": "Roles",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Role resources.",
          "items": {
            "$ref": "Role"
          }
        }
      }
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "id": "Alias",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      }
    },
    "UserLocation": {
      "id": "UserLocation",
      "properties": {
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a location entry."
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "Aliases": {
      "type": "object",
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "Building": {
      "properties": {
        "floorNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Building",
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "type": "object",
      "properties": {
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleName": {
          "description": "Name of the role.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            }
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        }
      }
    },
    "Features": {
      "description": "Public API: Resources.features",
      "id": "Features",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#featuresList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results.",
          "type": "array"
        }
      }
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "UserSshPublicKey",
      "type": "object"
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "Kind of resource this is."
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        }
      },
      "id": "Member"
    },
    "CalendarResources": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object",
      "id": "CalendarResources"
    },
    "Tokens": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList",
          "type": "string"
        },
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Tokens"
    },
    "UserIm": {
      "id": "UserIm",
      "type": "object",
      "properties": {
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        }
      },
      "description": "JSON template for instant messenger of an user."
    },
    "UserWebsite": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        }
      },
      "id": "UserWebsite",
      "type": "object",
      "description": "JSON template for a website entry."
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "type": "object",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "description": "JSON template for a feature instance."
    },
    "UserAddress": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        }
      },
      "id": "UserAddress",
      "type": "object",
      "description": "JSON template for address."
    },
    "UserExternalId": {
      "description": "JSON template for an externalId entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        }
      },
      "id": "UserExternalId",
      "type": "object"
    },
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        }
      },
      "type": "object",
      "id": "OrgUnit"
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "ChromeOsDevices": {
      "properties": {
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array",
          "description": "List of Chrome OS Device objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is."
        }
      },
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array"
        }
      },
      "id": "OrgUnits",
      "type": "object"
    },
    "Buildings": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "Buildings",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        }
      }
    },
    "UserEmail": {
      "type": "object",
      "description": "JSON template for an email.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserEmail"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "name": {
          "description": "The name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#Feature"
        }
      },
      "id": "Feature",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "properties": {
        "kind": {
          "default": "admin#directory#users",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "users": {
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "type": "object"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "type": "object",
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string",
          "default": "admin#directory#privilege"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege."
        }
      }
    },
    "BuildingAddress": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        }
      },
      "id": "BuildingAddress"
    },
    "DomainAliases": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "DomainAliases",
      "type": "object"
    },
    "UserCustomProperties": {
      "type": "object",
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object"
    },
    "UserPhone": {
      "id": "UserPhone",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a phone entry."
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width in pixels of the photo"
        },
        "height": {
          "description": "Height in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "photoData": {
          "format": "byte",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "description": "Base64 encoded photo data"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Asp": {
      "properties": {
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asp"
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "VerificationCode",
      "type": "object"
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          }
        }
      }
    },
    "UserGender": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string",
          "default": "api#channel"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "expiration": {
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        }
      },
      "id": "Channel"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      },
      "id": "ChromeOsDeviceAction",
      "type": "object"
    },
    "BuildingCoordinates": {
      "properties": {
        "latitude": {
          "type": "number",
          "description": "Latitude in decimal degrees.",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingCoordinates"
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainName": {
          "type": "string",
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "Creation time of the domain. (Read-only)."
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        }
      }
    },
    "Domains2": {
      "type": "object",
      "id": "Domains2",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domains": {
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        }
      }
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "resources": {
    "channels": {
      "methods": {
        "stop": {
          "description": "Stop watching resources through this channel.",
          "parameterOrder": [],
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          },
          "id": "admin.channels.stop",
          "httpMethod": "POST"
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete."
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PUT",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "id": "directory.resources.calendars.get",
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              }
            },
            "insert": {
              "id": "directory.resources.calendars.insert",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a calendar resource.",
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "POST"
            },
            "patch": {
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.patch"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "minimum": "1",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "location": "query",
                  "format": "int32"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                }
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "httpMethod": "GET",
              "response": {
                "$ref": "CalendarResources"
              }
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature."
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.update",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to retrieve."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "GET"
            },
            "list": {
              "description": "Retrieves a list of features for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "location": "query",
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1"
                }
              }
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "oldName": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to rename.",
                  "type": "string"
                }
              },
              "id": "directory.resources.features.rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              }
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "id": "directory.resources.features.patch",
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              }
            }
          }
        },
        "buildings": {
          "methods": {
            "update": {
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "description": "Updates a building.",
              "id": "directory.resources.buildings.update",
              "parameters": {
                "coordinatesSource": {
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "description": "Retrieves a list of buildings for an account.",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "format": "int32",
                  "type": "integer",
                  "minimum": "1",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.insert",
              "description": "Inserts a building."
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Retrieves a building.",
              "httpMethod": "GET",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get"
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "delete": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to delete.",
                  "location": "path"
                }
              },
              "description": "Deletes a building.",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert",
          "request": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "get": {
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "description": "Deletes a domain Alias of the customer.",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.list",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "description": "Lists the domain aliases of the customer.",
          "parameters": {
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Retrieve organizational unit",
          "id": "directory.orgunits.get",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.insert",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Add organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.update",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Update organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "orgUnitPath": {
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "type": "string",
              "required": true
            }
          }
        },
        "patch": {
          "id": "directory.orgunits.patch",
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PATCH",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "delete": {
          "id": "directory.orgunits.delete",
          "description": "Remove organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "pattern": "^.*$"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "type": {
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "default": "",
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Retrieve all organizational units"
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "description": "Retrieve schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Update schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.update",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schema"
          },
          "description": "Create schema.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "delete": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "patch": {
          "description": "Patch Schema via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.patch",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "schemaKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "Schemas"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "id": "directory.schemas.list",
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "parameterOrder": [
                "userKey"
              ],
              "description": "Retrieve photo of a user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.get",
              "httpMethod": "GET",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "description": "Add a photo for the user",
              "id": "directory.users.photos.update",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "id": "directory.users.photos.patch",
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "httpMethod": "PATCH"
            },
            "delete": {
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "description": "Remove photos for the user"
            }
          }
        },
        "aliases": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                },
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE"
            },
            "insert": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "description": "Add a alias for the user",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "httpMethod": "POST"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.users.aliases.list",
              "parameterOrder": [
                "userKey"
              ],
              "description": "List all aliases for a user",
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            },
            "watch": {
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                },
                "event": {
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "location": "query"
                }
              },
              "description": "Watch for changes in users list",
              "response": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch"
            }
          }
        }
      },
      "methods": {
        "watch": {
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "parameters": {
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "projection": {
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "viewType": {
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view",
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ]
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "type": "integer",
              "maximum": "500",
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "default": "100"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query",
              "description": "Event on which subscription is intended",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list",
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "path": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch"
        },
        "undelete": {
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "The immutable id of the user",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "description": "Undelete a deleted user"
        },
        "list": {
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string"
            },
            "viewType": {
              "default": "admin_view",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "500",
              "default": "100"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "GET",
          "id": "directory.users.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Users"
          }
        },
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "update user",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true
            }
          },
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "path": "admin/directory/v1/users",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "parameters": {},
          "parameterOrder": [],
          "response": {
            "$ref": "User"
          },
          "description": "create user.",
          "request": {
            "$ref": "User"
          }
        },
        "signOut": {
          "parameters": {
            "userKey": {
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.users.signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Delete user",
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "description": "retrieve user",
          "id": "directory.users.get",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user."
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "default": "admin_view",
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ]
        },
        "patch": {
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Patch Users via Apiary Patch Orchestration",
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "makeAdmin": {
          "httpMethod": "POST",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "change admin status of a user",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user as admin",
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            },
            "codeId": {
              "type": "integer",
              "location": "path",
              "description": "The unique ID of the ASP.",
              "required": true,
              "format": "int32"
            }
          },
          "description": "Get information about an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Asp"
          }
        },
        "list": {
          "id": "directory.asps.list",
          "parameterOrder": [
            "userKey"
          ],
          "description": "List the ASPs issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "response": {
            "$ref": "Asps"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "delete": {
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            },
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer",
              "location": "path",
              "format": "int32",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "members": {
      "methods": {
        "patch": {
          "httpMethod": "PATCH",
          "id": "directory.members.patch",
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.update",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Update membership of a user in the specified group.",
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "PUT"
        },
        "insert": {
          "httpMethod": "POST",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.members.insert",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group."
        },
        "hasMember": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "MembersHasMember"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true
            }
          },
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        },
        "list": {
          "id": "directory.members.list",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "default": "200"
            },
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "roles": {
              "location": "query",
              "type": "string",
              "description": "Comma separated role values to filter list results on."
            }
          },
          "response": {
            "$ref": "Members"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve all members in a group (paginated)",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members"
        },
        "delete": {
          "id": "directory.members.delete",
          "description": "Remove membership.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "description": "Retrieve Group Member",
          "id": "directory.members.get",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the member",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.roles.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Deletes a role.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "patch": {
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "request": {
            "$ref": "Role"
          }
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.update",
          "description": "Updates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "get": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "GET",
          "id": "directory.roles.get",
          "description": "Retrieves a role."
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "response": {
            "$ref": "Roles"
          },
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32",
              "type": "integer"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role.",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.twoStepVerification.turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "update": {
          "id": "directory.chromeosdevices.update",
          "parameters": {
            "deviceId": {
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "type": "string"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields."
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PUT",
          "description": "Update Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "patch": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Patch Chrome OS Device",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get"
        },
        "moveDevicesToOu": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "query",
              "description": "Full path of the target organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "httpMethod": "POST"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "type": "integer",
              "minimum": "1",
              "default": "100",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "orgUnitPath": {
              "location": "query",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "httpMethod": "GET"
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Take action on Chrome OS Device",
          "id": "directory.chromeosdevices.action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "action": {
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "httpMethod": "POST",
          "description": "Take action on Mobile Device",
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ]
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevice"
          },
          "id": "directory.mobiledevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "description": "Retrieve Mobile Device",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevices"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            },
            "sortOrder": {
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "100",
              "default": "100",
              "location": "query",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "location": "query"
            }
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Delete Mobile Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            }
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "maximum": "200",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "id": "directory.roleAssignments.list",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.get",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieve a role assignment.",
          "httpMethod": "GET"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role assignment."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.delete",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment."
        },
        "insert": {
          "request": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "POST",
          "response": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role assignment.",
          "id": "directory.roleAssignments.insert"
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "id": "directory.customers.get",
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "description": "Retrieves a customer.",
          "parameters": {
            "customerKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Id of the customer to be retrieved"
            }
          },
          "httpMethod": "GET"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "request": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Id of the customer to be updated"
            }
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "update": {
          "response": {
            "$ref": "Customer"
          },
          "description": "Updates a customer.",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Id of the customer to be updated"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.update"
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "parameters": {
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "location": "path",
              "required": true
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Retrieves a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.get"
        },
        "list": {
          "description": "Lists the domains of the customer.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains2"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domains.list",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "domainName": {
              "location": "path",
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true
            }
          },
          "id": "directory.domains.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "response": {
            "$ref": "Domains"
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.privileges.list",
          "response": {
            "$ref": "Privileges"
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Tokens"
          },
          "id": "directory.tokens.list",
          "httpMethod": "GET",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Delete all access tokens issued by a user for an application.",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.delete",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "get": {
          "response": {
            "$ref": "Token"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            },
            "clientId": {
              "type": "string",
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            }
          },
          "description": "Get information about an access token issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "id": "directory.verificationCodes.invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "generate": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user."
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "id": "directory.groups.aliases.delete",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The alias to be removed"
                },
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Remove a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "DELETE"
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "httpMethod": "GET",
              "description": "List all aliases for a group",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.groups.aliases.list",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "insert": {
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Add a alias for the group",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ]
            }
          }
        }
      },
      "methods": {
        "patch": {
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.patch"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Delete Group",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "get": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve Group",
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "GET"
        },
        "list": {
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "maxResults": {
              "default": "200",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            }
          },
          "id": "directory.groups.list",
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "response": {
            "$ref": "Groups"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET"
        },
        "insert": {
          "id": "directory.groups.insert",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups",
          "description": "Create Group",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": []
        },
        "update": {
          "id": "directory.groups.update",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "description": "Update Group",
          "parameterOrder": [
            "groupKey"
          ]
        }
      }
    }
  },
  "id": "admin:directory_v1",
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "type": "string",
      "description": "Data format for response."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "ownerName": "Google",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        }
      }
    }
  },
  "basePath": "",
  "title": "Admin SDK",
  "packagePath": "admin",
  "canonicalName": "directory",
  "discoveryVersion": "v1",
  "name": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "version": "directory_v1",
  "ownerDomain": "google.com",
  "rootUrl": "https://www.googleapis.com/"
}
