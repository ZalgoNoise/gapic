{
  "name": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "batchPath": "batch/admin/directory_v1",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "canonicalName": "directory",
  "rootUrl": "https://www.googleapis.com/",
  "protocol": "rest",
  "id": "admin:directory_v1",
  "packagePath": "admin",
  "version": "directory_v1",
  "servicePath": "",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1",
  "schemas": {
    "DomainAlias": {
      "type": "object",
      "properties": {
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "parentDomainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      },
      "id": "DomainAlias"
    },
    "Buildings": {
      "id": "Buildings",
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "buildings": {
          "description": "The Buildings in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Building"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserPhoto": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height in pixels of the photo"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "width": {
          "type": "integer",
          "description": "Width in pixels of the photo",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "photoData": {
          "format": "byte",
          "type": "string",
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        }
      }
    },
    "UserExternalId": {
      "description": "JSON template for an externalId entry.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      },
      "id": "UserExternalId",
      "type": "object"
    },
    "UserName": {
      "properties": {
        "familyName": {
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "id": "UserName",
      "type": "object"
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "CalendarResources": {
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "Domains2": {
      "id": "Domains2",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Aliases": {
      "type": "object",
      "id": "Aliases",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "JSON response template to list aliases in Directory API."
    },
    "ChromeOsDevices": {
      "properties": {
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevices"
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "id": "UserAbout",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "type": "object",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "FeatureRename": {
      "type": "object",
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string"
        }
      }
    },
    "Users": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "User"
          },
          "type": "array",
          "description": "List of user objects."
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        }
      },
      "type": "object",
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "BuildingAddress": {
      "type": "object",
      "properties": {
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress"
    },
    "UserSshPublicKey": {
      "id": "UserSshPublicKey",
      "properties": {
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry."
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "description": "Latitude in decimal degrees.",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "BuildingCoordinates"
    },
    "CalendarResource": {
      "properties": {
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer"
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Token",
      "type": "object",
      "properties": {
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string",
          "default": "admin#directory#token"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        }
      },
      "id": "Member"
    },
    "Group": {
      "type": "object",
      "id": "Group",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#group"
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "string",
          "description": "Group name"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevices": {
      "type": "object",
      "id": "MobileDevices",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        }
      }
    },
    "OrgUnit": {
      "type": "object",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is."
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "name": {
          "description": "Name of OrgUnit",
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        }
      },
      "id": "OrgUnit"
    },
    "UserRelation": {
      "id": "UserRelation",
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      }
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      }
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel",
      "properties": {
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "description": "JSON template for a language entry.",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          }
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      }
    },
    "User": {
      "properties": {
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password",
          "type": "string"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "type": "string",
          "readOnly": true
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "aliases": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        },
        "isMailboxSetup": {
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName",
          "description": "User's name"
        },
        "creationTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "thumbnailPhotoEtag": {
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#user",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Kind of resource this is."
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "isAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "customSchemas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user."
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "username of User"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "type": "array"
        }
      },
      "id": "User",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Groups",
      "properties": {
        "kind": {
          "default": "admin#directory#groups",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "Features": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#featuresList"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features"
    },
    "RoleAssignment": {
      "type": "object",
      "properties": {
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        }
      },
      "id": "RoleAssignment"
    },
    "UserAddress": {
      "id": "UserAddress",
      "type": "object",
      "properties": {
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        }
      },
      "description": "JSON template for address."
    },
    "Asps": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "type": "array",
          "description": "A list of ASP resources."
        }
      },
      "id": "Asps"
    },
    "UserPhone": {
      "description": "JSON template for a phone entry.",
      "type": "object",
      "id": "UserPhone",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "Members": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#members",
          "type": "string"
        },
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Members"
    },
    "Tokens": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of Role resources.",
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "DomainAliases": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects.",
          "type": "array"
        }
      },
      "id": "DomainAliases"
    },
    "UserIm": {
      "type": "object",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "id": "UserIm"
    },
    "UserLocation": {
      "properties": {
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation"
    },
    "MobileDevice": {
      "properties": {
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevice"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "applications": {
          "type": "array",
          "items": {
            "properties": {
              "permission": {
                "description": "List of Permissions for application",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "versionCode": {
                "description": "Version code of application",
                "format": "int32",
                "type": "integer"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "email": {
          "description": "List of owner user's email addresses (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        }
      },
      "id": "MobileDevice",
      "type": "object"
    },
    "FeatureInstance": {
      "type": "object",
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      }
    },
    "Schema": {
      "properties": {
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Schema name"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "fields": {
          "description": "Fields of Schema",
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        }
      },
      "type": "object",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema"
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        }
      }
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object"
    },
    "UserEmail": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for an email.",
      "type": "object",
      "id": "UserEmail"
    },
    "RoleAssignments": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        }
      },
      "id": "Privilege"
    },
    "OrgUnits": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits"
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits"
    },
    "Feature": {
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "Feature"
    },
    "Privileges": {
      "properties": {
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of Privilege resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        }
      },
      "id": "Privileges",
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array",
          "items": {
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            },
            "type": "object"
          },
          "description": "The set of privileges that are granted to this role."
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string",
          "default": "admin#directory#role"
        }
      }
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "id": "MobileDeviceAction"
    },
    "Domains": {
      "properties": {
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects. (Read-only)"
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "Domains",
      "type": "object"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "id": "UserPosixAccount",
      "properties": {
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer",
          "format": "int32"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        },
        "deprovisionReason": {
          "type": "string"
        }
      }
    },
    "CustomerPostalAddress": {
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        }
      }
    },
    "Asp": {
      "type": "object",
      "id": "Asp",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "codeId": {
          "type": "integer",
          "description": "The unique ID of the ASP.",
          "format": "int32"
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "lastTimeUsed": {
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Alias": {
      "properties": {
        "id": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API."
    },
    "Customer": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "default": "admin#directory#customer"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        }
      },
      "id": "Customer"
    },
    "Building": {
      "id": "Building",
      "properties": {
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#Building",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Schemas": {
      "type": "object",
      "id": "Schemas",
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "SchemaFieldSpec": {
      "properties": {
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "numericIndexingSpec": {
          "properties": {
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec",
          "type": "string"
        },
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "VerificationCodes": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources."
        }
      },
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCodes",
      "type": "object"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "activeTimeRanges": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "description": "Duration in milliseconds",
                "format": "int32",
                "type": "integer"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              }
            }
          },
          "description": "List of active time ranges (Read-only)"
        },
        "tpmVersionInfo": {
          "properties": {
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            }
          }
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "description": "List of CPU temperature samples.",
                "items": {
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "properties": {
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "Disk volumes"
              }
            }
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "lastKnownNetwork": {
          "items": {
            "properties": {
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              },
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "systemRamFreeReports": {
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "type": "object",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "Website."
        }
      },
      "id": "UserWebsite"
    },
    "UserMakeAdmin": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      },
      "id": "UserMakeAdmin"
    }
  },
  "parameters": {
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerName": "Google",
  "ownerDomain": "google.com",
  "baseUrl": "https://www.googleapis.com/",
  "resources": {
    "orgunits": {
      "methods": {
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "id": "directory.orgunits.update",
          "description": "Update organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all organizational units",
          "id": "directory.orgunits.list",
          "parameters": {
            "orgUnitPath": {
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "type": "string",
              "default": ""
            },
            "type": {
              "type": "string",
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "description": "Add organizational unit",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^.*$"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.orgunits.patch",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.get",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "pattern": "^.*$",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "GET",
          "description": "Retrieve organizational unit"
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Remove organizational unit",
          "id": "directory.orgunits.delete",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        }
      }
    },
    "roles": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "roleId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Retrieves a role."
        },
        "delete": {
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.roles.delete"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "request": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "update": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.update",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Role"
          },
          "description": "Updates a role."
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            }
          }
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "response": {
            "$ref": "Roles"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.list",
          "parameters": {
            "maxResults": {
              "description": "Maximum number of results to return.",
              "format": "int32",
              "minimum": "1",
              "maximum": "100",
              "location": "query",
              "type": "integer"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "deviceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Retrieve Chrome OS Device",
          "id": "directory.chromeosdevices.get",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "moveDevicesToOu": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "type": "string",
              "location": "query",
              "required": true
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          }
        },
        "update": {
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PUT",
          "description": "Update Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "id": "directory.chromeosdevices.update",
          "parameters": {
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query"
            },
            "deviceId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Patch Chrome OS Device",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.patch",
          "parameters": {
            "deviceId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PATCH"
        },
        "list": {
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET",
          "id": "directory.chromeosdevices.list",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ]
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "id": "directory.chromeosdevices.action",
          "parameters": {
            "resourceId": {
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "description": "Take action on Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.customers.get",
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Retrieves a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET"
        },
        "patch": {
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "request": {
            "$ref": "Customer"
          }
        }
      }
    },
    "members": {
      "methods": {
        "patch": {
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "hasMember": {
          "httpMethod": "GET",
          "response": {
            "$ref": "MembersHasMember"
          },
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.hasMember"
        },
        "get": {
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.get",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve Group Member",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "description": "Update membership of a user in the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group.",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "POST"
        },
        "list": {
          "description": "Retrieve all members in a group (paginated)",
          "id": "directory.members.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "default": "200"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "roles": {
              "location": "query",
              "description": "Comma separated role values to filter list results on.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members"
        },
        "delete": {
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member"
            }
          },
          "id": "directory.members.delete",
          "httpMethod": "DELETE"
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "id": "directory.tokens.delete",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "parameters": {
            "clientId": {
              "location": "path",
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "type": "string"
            },
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "get": {
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Token"
          },
          "id": "directory.tokens.get",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "parameters": {
            "clientId": {
              "required": true,
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "list": {
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.tokens.list",
          "response": {
            "$ref": "Tokens"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        }
      }
    },
    "groups": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "response": {
            "$ref": "Groups"
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "id": "directory.groups.list",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "default": "200",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            }
          }
        },
        "delete": {
          "description": "Delete Group",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "description": "Retrieve Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "path": "admin/directory/v1/groups",
          "httpMethod": "POST",
          "response": {
            "$ref": "Group"
          },
          "description": "Create Group",
          "parameterOrder": [],
          "request": {
            "$ref": "Group"
          },
          "parameters": {},
          "id": "directory.groups.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "description": "Update Group",
          "httpMethod": "PUT",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true
            }
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "httpMethod": "PATCH"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the group",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ]
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "groupKey"
              ],
              "description": "List all aliases for a group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "httpMethod": "GET"
            },
            "delete": {
              "id": "directory.groups.aliases.delete",
              "description": "Remove a alias for the group",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "DELETE",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "required": true,
                  "description": "The alias to be removed",
                  "type": "string",
                  "location": "path"
                },
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              }
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "id": "directory.privileges.list",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.list",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user."
        },
        "invalidate": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST",
          "description": "Invalidate the current backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        },
        "generate": {
          "parameterOrder": [
            "userKey"
          ],
          "description": "Generate new backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "response": {
            "$ref": "MobileDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.list",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results"
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "location": "query",
              "minimum": "1",
              "default": "100",
              "maximum": "100",
              "type": "integer"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "id": "directory.mobiledevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "description": "Retrieve Mobile Device",
          "response": {
            "$ref": "MobileDevice"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            }
          }
        },
        "action": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.action",
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            }
          },
          "httpMethod": "DELETE",
          "description": "Delete Mobile Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema"
            }
          },
          "description": "Retrieve schema",
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.get"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "description": "Update schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "id": "directory.schemas.update",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "description": "Retrieve all schemas for a customer",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "response": {
            "$ref": "Schemas"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.list"
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.insert",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "description": "Create schema.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "patch": {
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.delete",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "update": {
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Updates a feature.",
              "id": "directory.resources.features.update",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              }
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path"
                }
              },
              "id": "directory.resources.features.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "id": "directory.resources.features.rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "oldName": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to rename."
                }
              },
              "request": {
                "$ref": "FeatureRename"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST"
            },
            "list": {
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "parameters": {
                "maxResults": {
                  "maximum": "500",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                }
              },
              "description": "Retrieves a list of features for an account.",
              "id": "directory.resources.features.list"
            },
            "insert": {
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "id": "directory.resources.features.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature.",
              "response": {
                "$ref": "Feature"
              }
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "request": {
                "$ref": "Feature"
              }
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a feature.",
              "id": "directory.resources.features.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        },
        "calendars": {
          "methods": {
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "GET",
              "id": "directory.resources.calendars.list",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "maxResults": {
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "maximum": "500",
                  "location": "query"
                },
                "orderBy": {
                  "type": "string",
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "response": {
                "$ref": "CalendarResources"
              }
            },
            "insert": {
              "id": "directory.resources.calendars.insert",
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ]
            },
            "delete": {
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to delete.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Deletes a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE"
            },
            "update": {
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.update",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "description": "Retrieves a calendar resource.",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            }
          }
        },
        "buildings": {
          "methods": {
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Updates a building.",
              "parameters": {
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.buildings.update",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "insert": {
              "id": "directory.resources.buildings.insert",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "parameterOrder": [
                "customer"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Deletes a building.",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to delete."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.resources.buildings.delete",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "list": {
              "id": "directory.resources.buildings.list",
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "minimum": "1",
                  "type": "integer",
                  "format": "int32",
                  "maximum": "500",
                  "description": "Maximum number of results to return."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Buildings"
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of buildings for an account."
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "id": "directory.resources.buildings.get",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "description": "Retrieves a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PATCH"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Turn off 2-Step Verification for user."
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.list",
          "description": "Lists the domain aliases of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "parentDomainName": {
              "type": "string",
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert",
          "request": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Deletes a domain Alias of the customer.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "get": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.get",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.get",
          "response": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        },
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "Domains"
          },
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer."
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "domainName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Lists the domains of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Asps"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "List the ASPs issued by a user."
        },
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.delete",
          "parameters": {
            "codeId": {
              "type": "integer",
              "location": "path",
              "required": true,
              "format": "int32",
              "description": "The unique ID of the ASP to be deleted."
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            },
            "codeId": {
              "location": "path",
              "format": "int32",
              "required": true,
              "type": "integer",
              "description": "The unique ID of the ASP."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "id": "directory.asps.get",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "response": {
            "$ref": "Asp"
          }
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Remove a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                },
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "request": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              },
              "parameters": {
                "event": {
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ]
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "Watch for changes in users list",
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "list": {
              "httpMethod": "GET",
              "description": "List all aliases for a user",
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.users.aliases.list"
            },
            "insert": {
              "id": "directory.users.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Add a alias for the user",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "POST"
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.update",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "Add a photo for the user",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.get",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user"
            },
            "patch": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "id": "directory.users.photos.patch",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      },
      "methods": {
        "patch": {
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Patch Users via Apiary Patch Orchestration",
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "id": "directory.users.patch",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PATCH"
        },
        "update": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "request": {
            "$ref": "User"
          },
          "description": "update user"
        },
        "signOut": {
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.users.signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/signOut"
        },
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Delete user",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          },
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "parameters": {
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "projection": {
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "maxResults": {
              "maximum": "500",
              "location": "query",
              "default": "100",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "description": "Column to use for sorting results"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            }
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "path": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          },
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [],
          "id": "directory.users.list",
          "httpMethod": "GET"
        },
        "undelete": {
          "httpMethod": "POST",
          "description": "Undelete a deleted user",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "watch": {
          "parameters": {
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query",
              "default": "100",
              "maximum": "500",
              "format": "int32"
            },
            "viewType": {
              "type": "string",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "type": "string"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "event": {
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string",
              "description": "Event on which subscription is intended"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string"
            }
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "description": "Watch for changes in users list",
          "response": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch",
          "request": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.watch",
          "path": "admin/directory/v1/users/watch"
        },
        "get": {
          "parameters": {
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "default": "admin_view",
              "type": "string"
            },
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path"
            },
            "projection": {
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            }
          },
          "description": "retrieve user",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "response": {
            "$ref": "User"
          },
          "parameters": {},
          "path": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "description": "create user.",
          "httpMethod": "POST",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert"
        },
        "makeAdmin": {
          "id": "directory.users.makeAdmin",
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user as admin",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "path": "admin/directory_v1/channels/stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "httpMethod": "POST",
          "parameters": {},
          "flatPath": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleAssignmentId": {
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.roleAssignments.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "get": {
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "list": {
          "id": "directory.roleAssignments.list",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "maxResults": {
              "maximum": "200",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ]
        },
        "insert": {
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "request": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment.",
          "httpMethod": "POST"
        }
      }
    }
  },
  "title": "Admin SDK",
  "revision": "20200915"
}
